import analysis.inner_product_space.pi_L2
import mathlib.analysis.normed.group.basic
import mathlib.analysis.normed_space.pi_Lp
import mathlib.analysis.normed_space.ray
import mathlib.analysis.special_functions.log.basic
import mathlib.analysis.special_functions.pow.real
import prereqs.misc
import prereqs.translate

/-!
# Lp norm
-/

open set
open_locale big_operators complex_conjugate ennreal nnreal

section Lpnorm
variables {Œπ : Type*} [fintype Œπ] {Œ± : Œπ ‚Üí Type*} [Œ† i, normed_add_comm_group (Œ± i)] {p : ‚Ñù‚â•0‚àû}
  {f g h : Œ† i, Œ± i}

/-- The Lp norm of a function. -/
@[reducible] noncomputable def Lpnorm (p : ‚Ñù‚â•0‚àû) (f : Œ† i, Œ± i) : ‚Ñù :=
‚Äñ(pi_Lp.equiv p _).symm f‚Äñ

notation `‚Äñ` f `‚Äñ_[` p `]` := Lpnorm p f

lemma Lpnorm_eq_sum' (hp : 0 < p.to_real) (f : Œ† i, Œ± i) :
  ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ p.to_real) ^ p.to_real‚Åª¬π :=
by rw ‚Üêone_div; exact pi_Lp.norm_eq_sum hp _

lemma Lpnorm_eq_sum'' {p : ‚Ñù} (hp : 0 < p) (f : Œ† i, Œ± i) :
  ‚Äñf‚Äñ_[p.to_nnreal] = (‚àë i, ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π :=
by rw [Lpnorm_eq_sum']; simp [hp, hp.le]

lemma Lpnorm_eq_sum {p : ‚Ñù‚â•0} (hp : 0 < p) (f : Œ† i, Œ± i) :
  ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) :=
Lpnorm_eq_sum' hp _

lemma Lpnorm_rpow_eq_sum {p : ‚Ñù‚â•0} (hp : 0 < p) (f : Œ† i, Œ± i) :
  ‚Äñf‚Äñ_[p] ^ (p : ‚Ñù) = ‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù) :=
begin
  rw [Lpnorm_eq_sum hp, real.rpow_inv_rpow],
  { exact finset.sum_nonneg (Œª i _, by positivity) },
  { positivity }
end

lemma L1norm_eq_sum (f : Œ† i, Œ± i) : ‚Äñf‚Äñ_[1] = ‚àë i, ‚Äñf i‚Äñ := by simp [Lpnorm_eq_sum']

lemma L0norm_eq_card (f : Œ† i, Œ± i) : ‚Äñf‚Äñ_[0] = {i | f i ‚â† 0}.to_finite.to_finset.card :=
pi_Lp.norm_eq_card _

lemma Linftynorm_eq_csupr (f : Œ† i, Œ± i) : ‚Äñf‚Äñ_[‚àû] = ‚®Ü i, ‚Äñf i‚Äñ := pi_Lp.norm_eq_csupr _

@[simp] lemma Lpnorm_zero : ‚Äñ(0 : Œ† i, Œ± i)‚Äñ_[p] = 0 :=
begin
  cases p, swap,
  obtain rfl | hp := @eq_zero_or_pos _ _ p,
  all_goals { simp [Linftynorm_eq_csupr, L0norm_eq_card, Lpnorm_eq_sum, *, ne_of_gt] },
end

@[simp] lemma Lpnorm_nonneg : 0 ‚â§ ‚Äñf‚Äñ_[p] :=
begin
  cases p,
  { simp only [Linftynorm_eq_csupr, ennreal.none_eq_top],
    exact real.supr_nonneg (Œª i, norm_nonneg _) },
  obtain rfl | hp := @eq_zero_or_pos _ _ p,
  { simp only [L0norm_eq_card, ennreal.some_eq_coe, ennreal.coe_zero],
    exact nat.cast_nonneg _ },
  { simp only [Lpnorm_eq_sum hp, ennreal.some_eq_coe],
    exact real.rpow_nonneg_of_nonneg
      (finset.sum_nonneg $ Œª i _, real.rpow_nonneg_of_nonneg (norm_nonneg _) _) _ }
end

section one_le

-- TODO: Remove the `1 ‚â§ p` condition
lemma Lpnorm_sub_comm (hp : 1 ‚â§ p) (f g : Œ† i, Œ± i) : ‚Äñf - g‚Äñ_[p] = ‚Äñg - f‚Äñ_[p] :=
by haveI := fact.mk hp; exact norm_sub_rev _ _

lemma Lpnorm_add_le (hp : 1 ‚â§ p) (f g : Œ† i, Œ± i) : ‚Äñf + g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
by haveI := fact.mk hp; exact norm_add_le _ _

lemma Lpnorm_sub_le (hp : 1 ‚â§ p) (f g : Œ† i, Œ± i) : ‚Äñf - g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
by haveI := fact.mk hp; exact norm_sub_le _ _

lemma Lpnorm_sub_le_Lpnorm_sub_add_Lpnorm_sub (hp : 1 ‚â§ p) :
  ‚Äñf - h‚Äñ_[p] ‚â§ ‚Äñf - g‚Äñ_[p] + ‚Äñg - h‚Äñ_[p] :=
by haveI := fact.mk hp; exact norm_sub_le_norm_sub_add_norm_sub

variables {ùïú : Type*} [normed_field ùïú] [Œ† i, normed_space ùïú (Œ± i)]

-- TODO: `p ‚â† 0` is enough
lemma Lpnorm_smul (hp : 1 ‚â§ p) (c : ùïú) (f : Œ† i, Œ± i) : ‚Äñc ‚Ä¢ f‚Äñ_[p] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p] :=
by haveI := fact.mk hp; exact norm_smul _ _

-- TODO: Why is it so hard to use `Lpnorm_smul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
lemma Lpnorm_smul' {Œ± : Type*} [normed_add_comm_group Œ±] [normed_space ùïú Œ±] (hp : 1 ‚â§ p) (c : ùïú)
  (f : Œπ ‚Üí Œ±) : ‚Äñc ‚Ä¢ f‚Äñ_[p] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p] :=
Lpnorm_smul hp _ _

variables [Œ† i, normed_space ‚Ñù (Œ± i)]

lemma Lpnorm_nsmul (hp : 1 ‚â§ p) (n : ‚Ñï) (f : Œ† i, Œ± i) : ‚Äñn ‚Ä¢ f‚Äñ_[p] = n ‚Ä¢ ‚Äñf‚Äñ_[p] :=
by haveI := fact.mk hp; exact norm_nsmul _ _

-- TODO: Why is it so hard to use `Lpnorm_nsmul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
lemma Lpnorm_nsmul' {Œ± : Type*} [normed_add_comm_group Œ±] [normed_space ‚Ñù Œ±] (hp : 1 ‚â§ p) (n : ‚Ñï)
  (f : Œπ ‚Üí Œ±) : ‚Äñn ‚Ä¢ f‚Äñ_[p] = n ‚Ä¢ ‚Äñf‚Äñ_[p] :=
Lpnorm_nsmul hp _ _

end one_le

/-! #### Weighted Lp norm -/

/-- The Lp norm of a function. -/
@[reducible] noncomputable def weight_Lpnorm (p : ‚Ñù‚â•0) (f : Œ† i, Œ± i) (w : Œπ ‚Üí ‚Ñù‚â•0) : ‚Ñù :=
‚Äñ(Œª i, w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ)‚Äñ_[p]

notation `‚Äñ` f `‚Äñ_[` p `, ` w `]` := weight_Lpnorm p f w

@[simp] lemma weight_Lpnorm_one (p : ‚Ñù‚â•0) (f : Œ† i, Œ± i) : ‚Äñf‚Äñ_[p, 1] = ‚Äñf‚Äñ_[p] :=
by obtain rfl | hp := @eq_zero_or_pos _ _ p; simp [weight_Lpnorm, L0norm_eq_card, Lpnorm_eq_sum, *]

/-! #### Inner product -/

variables (ùïú : Type*) [is_R_or_C ùïú] [Œ† i, inner_product_space ùïú (Œ± i)]

@[reducible] noncomputable def L2inner (f g : Œ† i, Œ± i) : ùïú :=
inner ((pi_Lp.equiv 2 _).symm f) ((pi_Lp.equiv 2 _).symm g)

notation `‚ü™`f`, `g`‚ü´_[`ùïú`]` := L2inner ùïú f g

lemma L2inner_eq_sum (f g : Œ† i, Œ± i) : ‚ü™f, g‚ü´_[ùïú] = ‚àë i, inner (f i) (g i) :=
pi_Lp.inner_apply _ _

end Lpnorm

section Lpnorm
variables {Œ± Œ≤ : Type*} [add_comm_group Œ±] [fintype Œ±] [normed_add_comm_group Œ≤] {p : ‚Ñù‚â•0‚àû}

@[simp] lemma Lpnorm_translate (a : Œ±) (f : Œ± ‚Üí Œ≤) : ‚ÄñœÑ a f‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
begin
  cases p,
  { simp only [Linftynorm_eq_csupr, ennreal.none_eq_top, translate_apply],
    exact (equiv.sub_right _).supr_congr (Œª _, rfl) },
  obtain rfl | hp := @eq_zero_or_pos _ _ p,
  { simp only [L0norm_eq_card, translate_apply, ne.def, ennreal.some_eq_coe, ennreal.coe_zero,
      nat.cast_inj],
    exact finset.card_congr (Œª x _, x - a) (Œª x hx, by simpa using hx)
      (Œª x y _ _ h, by simpa using h) (Œª x hx, ‚ü®x + a, by simpa using hx‚ü©) },
  { simp only [Lpnorm_eq_sum hp, ennreal.some_eq_coe, translate_apply],
    congr' 1,
    exact fintype.sum_equiv (equiv.sub_right _) _ _ (Œª _, rfl) }
end

end Lpnorm

section Lpnorm
variables {Œπ Œ± : Type*} [fintype Œ±]

/-- H√∂lder's inequality, binary case. -/
lemma Lpnorm_mul_le (p q r : ‚Ñù‚â•0‚àû) (hpqr : p‚Åª¬π + q‚Åª¬π = r‚Åª¬π) (f g : Œ± ‚Üí ‚ÑÇ) :
  ‚Äñf * g‚Äñ_[r] ‚â§ ‚Äñf‚Äñ_[p] * ‚Äñg‚Äñ_[q] :=
begin
  sorry,
end

/-- H√∂lder's inequality, finitary case. -/
lemma Lpnorm_prod_le {s : finset Œπ} (p : Œπ ‚Üí ‚Ñù‚â•0‚àû) (q : ‚Ñù‚â•0‚àû) (hpq : ‚àë i in s, (p i)‚Åª¬π = q‚Åª¬π)
  (f : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ) : ‚Äñ‚àè i in s, f i‚Äñ_[q] ‚â§ ‚àè i in s, ‚Äñf i‚Äñ_[p i] :=
begin
  classical,
  induction s using finset.induction with i s hi ih,
  sorry { simp },
  sorry
end

end Lpnorm

/-! ### Indicator -/

section mu
variables {Œ± : Type*} [decidable_eq Œ±] {s : finset Œ±} {p : ‚Ñù‚â•0}

noncomputable def mu (s : finset Œ±) : Œ± ‚Üí ‚ÑÇ := (s.card : ‚ÑÇ)‚Åª¬π ‚Ä¢ Œª x, ite (x ‚àà s) 1 0

@[simp] lemma mu_empty : mu (‚àÖ : finset Œ±) = 0 := by ext; simp [mu]

variables [fintype Œ±]

lemma Lpnorm_mu (hp : 1 ‚â§ p) (hs : s.nonempty) : ‚Äñmu s‚Äñ_[p] = s.card ^ (p‚Åª¬π - 1 : ‚Ñù) :=
begin
  have : (s.card : ‚Ñù) ‚â† 0 := nat.cast_ne_zero.2 hs.card_pos.ne',
  rw [mu, Lpnorm_smul'], swap,
  { exact_mod_cast hp },
  replace hp := zero_lt_one.trans_le hp,
  simp only [map_inv‚ÇÄ, complex.abs_cast_nat, smul_eq_mul, Lpnorm_eq_sum hp, complex.norm_eq_abs],
  have : ‚àÄ x, (ite (x ‚àà s) 1 0 : ‚Ñù) ^ (p : ‚Ñù) = ite (x ‚àà s) (1 ^ (p : ‚Ñù)) (0 ^ (p : ‚Ñù)) :=
    Œª x, by split_ifs; simp,
  simp_rw [apply_ite complex.abs, map_one, map_zero, this, real.zero_rpow
    (nnreal.coe_ne_zero.2 hp.ne'), real.one_rpow, finset.sum_boole, finset.filter_mem_eq_inter,
    finset.univ_inter, real.rpow_sub_one ‚Äπ_‚Ä∫, inv_mul_eq_div],
end

lemma Lpnorm_mu_le (hp : 1 ‚â§ p) : ‚Äñmu s‚Äñ_[p] ‚â§ s.card ^ (p‚Åª¬π - 1 : ‚Ñù) :=
begin
  obtain rfl | hs := s.eq_empty_or_nonempty,
  { simp,
    positivity },
  { exact (Lpnorm_mu hp hs).le }
end

lemma L1norm_mu (hs : s.nonempty) : ‚Äñmu s‚Äñ_[1] = 1 := by simpa using Lpnorm_mu le_rfl hs

lemma L1norm_mu_le_one : ‚Äñmu s‚Äñ_[1] ‚â§ 1 := by simpa using Lpnorm_mu_le le_rfl

end mu
