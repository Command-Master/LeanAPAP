import physics.unbalancing
import prereqs.convolution.norm
import prereqs.dft
import prereqs.misc

/-!
# Finite field case
-/

open finite_dimensional finset fintype function real
open_locale big_operators nnreal

variables {G : Type*} [add_comm_group G] [decidable_eq G] [fintype G] {A C : finset G} {Œ≥ Œµ : ‚Ñù}

lemma global_dichotomy (hA : A.nonempty) (hŒ≥C : Œ≥ ‚â§ C.card / card G) (hŒ≥ : 0 < Œ≥)
  (hAC : Œµ ‚â§ |card G * ‚ü™Œº A ‚àó Œº A, Œº C‚ü´_[‚Ñù] - 1|) :
  Œµ / (2 * card G) ‚â§ ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[‚Üë(2 * ‚åàŒ≥.curlog‚åâ‚Çä), const _ (card G)‚Åª¬π] :=
begin
  have hC : C.nonempty,
  { rw nonempty_iff_ne_empty,
    rintro rfl,
    simpa [hŒ≥.not_le] using hŒ≥C },
  have hŒ≥‚ÇÅ : Œ≥ ‚â§ 1 := hŒ≥C.trans (div_le_one_of_le (nat.cast_le.2 C.card_le_univ) $ by positivity),
  set p := 2 * ‚åàŒ≥.curlog‚åâ‚Çä,
  have hp : 1 < p := nat.succ_le_iff.1
    (le_mul_of_one_le_right zero_le' $ nat.ceil_pos.2 $ curlog_pos hŒ≥ hŒ≥‚ÇÅ),
  have hp' : (p‚Åª¬π : ‚Ñù‚â•0) < 1 := inv_lt_one (by exact_mod_cast hp),
  rw [mul_comm, ‚Üêdiv_div, div_le_iff (zero_lt_two' ‚Ñù)],
  calc
      _ ‚â§ _ : div_le_div_of_le (card G).cast_nonneg hAC
    ... = |‚ü™balance (Œº A) ‚àó balance (Œº A), Œº C‚ü´_[‚Ñù]| : _
    ... ‚â§ ‚Äñbalance (Œº_[‚Ñù] A) ‚àó balance (Œº A)‚Äñ_[p] * ‚ÄñŒº_[‚Ñù] C‚Äñ_[‚Üë(1 - p‚Åª¬π : ‚Ñù‚â•0)‚Åª¬π]
        : abs_L2inner_le_Lpnorm_mul_Lpnorm ‚ü®by exact_mod_cast hp, _‚ü© _ _
    ... ‚â§ ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[p] * (card G ^ (-p‚Åª¬π : ‚Ñù) * Œ≥ ^ (-p‚Åª¬π : ‚Ñù))
        : mul_le_mul (Lpnorm_conv_le_Lpnorm_dconv' (by positivity) (even_two_mul _) _) _
            (by positivity) (by positivity)
    ... = ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[‚Üë(2 * ‚åàŒ≥.curlog‚åâ‚Çä), const _ (card G)‚Åª¬π]
            * Œ≥ ^ (-p‚Åª¬π : ‚Ñù) : _
    ... ‚â§ _ : mul_le_mul_of_nonneg_left _ $ by positivity,
  { rw [‚Üêbalance_conv, balance, L2inner_sub_left, L2inner_const_left, expect_conv, sum_mu ‚Ñù hA,
      expect_mu ‚Ñù hA, sum_mu ‚Ñù hC, conj_trivial, one_mul, mul_one, ‚Üêmul_inv_cancel, ‚Üêmul_sub,
      abs_mul, abs_of_nonneg, mul_div_cancel_left];
    positivity },
  { rw [nnreal.coe_inv, nnreal.coe_sub hp'.le],
    simp },
  { rw [Lpnorm_mu (one_le_inv (tsub_pos_of_lt hp') tsub_le_self) hC, nnreal.coe_inv,
      nnreal.coe_sub hp'.le, nnreal.coe_one, inv_inv, sub_sub_cancel_left, ‚Üêmul_rpow],
    rw [le_div_iff, mul_comm] at hŒ≥C,
    refine rpow_le_rpow_of_nonpos _ hŒ≥C (neg_nonpos.2 _),
    all_goals { positivity } },
  { simp_rw [nat.cast_mul, nat.cast_two],
    rw [wLpnorm_const_right, mul_assoc, mul_left_comm, nnreal.coe_inv, inv_rpow, rpow_neg],
    push_cast,
    any_goals { norm_cast, rw nat.succ_le_iff },
    all_goals { positivity } },
  { push_cast,
    norm_num,
    rw [‚Üêneg_mul, rpow_mul, one_div, rpow_inv_le_iff_of_pos],
    refine (rpow_le_rpow_of_exponent_ge hŒ≥ hŒ≥‚ÇÅ $ neg_le_neg $ inv_le_inv_of_le (curlog_pos hŒ≥ hŒ≥‚ÇÅ) $
      nat.le_ceil _).trans ((rpow_neg_inv_curlog hŒ≥.le hŒ≥‚ÇÅ).trans $ exp_one_lt_d9.le.trans $
      by norm_num),
    all_goals { positivity } }
end

variables {q n : ‚Ñï} [module (zmod q) G] {A‚ÇÅ A‚ÇÇ : finset G} (S : finset G) {Œ±  : ‚Ñù}

lemma ap_in_ff (hA‚ÇÅ : Œ± ‚â§ A‚ÇÅ.card / card G) (hA‚ÇÇ : Œ± ‚â§ A‚ÇÇ.card / card G) :
  ‚àÉ (V : affine_subspace (zmod q) G) (V' : finset G), (V : set G) = V' ‚àß
    ‚Üë(finrank (zmod q) G - finrank (zmod q) V.direction) ‚â§
      2 ^ 27 * Œ±.curlog ^ 2 * (Œµ * Œ±).curlog ^ 2 / Œµ ^ 2 ‚àß
    |‚àë x in S, (Œº V' ‚àó Œº A‚ÇÅ ‚àó Œº A‚ÇÇ) x - ‚àë x in S, (Œº A‚ÇÅ ‚àó Œº A‚ÇÇ) x| ‚â§ Œµ := sorry

lemma di_in_ff (hŒµ‚ÇÄ : 0 < Œµ) (hŒµ‚ÇÅ : Œµ < 1) (hŒ±A : Œ± ‚â§ A.card / card G) (hŒ≥C : Œ≥ ‚â§ C.card / card G)
  (hŒ≥ : 0 < Œ≥) (hAC : Œµ ‚â§ |card G * ‚ü™Œº A ‚àó Œº A, Œº C‚ü´_[‚Ñù] - 1|) :
  ‚àÉ (V : affine_subspace (zmod q) G) (V' : finset G), (V : set G) = V' ‚àß
    ‚Üë(finrank (zmod q) G - finrank (zmod q) V.direction) ‚â§
      2 ^ 171 * Œ±.curlog ^ 4 * Œ≥.curlog ^ 4 / Œµ ^ 24 ‚àß
    (1 + Œµ / 32) * Œ± ‚â§ ‚Äñùü≠_[‚Ñù] A * Œº V'‚Äñ_[‚ä§] :=
begin
  obtain rfl | hA := A.eq_empty_or_nonempty,
  sorry { refine ‚ü®‚ä§, univ, _‚ü©,
    rw affine_subspace.direction_top,
    simp only [affine_subspace.top_coe, coe_univ, eq_self_iff_true, finrank_top, tsub_self,
      nat.cast_zero, indicate_empty, zero_mul, Lpnorm_zero, true_and, finset.card_empty, zero_div]
      at ‚ä¢ hŒ±A,
    exact ‚ü®by positivity, mul_nonpos_of_nonneg_of_nonpos (by positivity) hŒ±A‚ü© },
  have hŒ≥‚ÇÅ : Œ≥ ‚â§ 1 := hŒ≥C.trans (div_le_one_of_le (nat.cast_le.2 C.card_le_univ) $ by positivity),
  have hG : (card G : ‚Ñù) ‚â† 0 := by positivity,
  have := unbalancing _ (mul_ne_zero two_ne_zero (nat.ceil_pos.2 $ curlog_pos hŒ≥ hŒ≥‚ÇÅ).ne')
    (Œµ / 2) (by positivity) (div_le_one_of_le (hŒµ‚ÇÅ.le.trans $ by norm_num) $ by norm_num)
    (const _ (card G)‚Åª¬π) (card G ‚Ä¢ (balance (Œº A) ‚óã balance (Œº A))) (sqrt (card G) ‚Ä¢ balance (Œº A))
    (const _ (card G)‚Åª¬π) _ _ _ _,
  rotate 1,
  sorry { ext a : 1,
    simp [smul_dconv, dconv_smul, smul_smul] },
  { simp [card_univ, (show (card G : ‚ÑÇ) ‚â† 0, by sorry)] },
  { simp only [comp_const, nonneg.coe_inv, nnreal.coe_nat_cast],
    rw [‚Üêennreal.coe_one, Lpnorm_const one_ne_zero],
    simp only [nonneg.coe_one, inv_one, rpow_one, norm_inv, norm_coe_nat,
      mul_inv_cancel (show (card G : ‚Ñù) ‚â† 0, by positivity)] },
  { have hŒ≥' : (1 : ‚Ñù‚â•0) ‚â§ 2 * ‚åàŒ≥.curlog‚åâ‚Çä := sorry,
    simpa [wLpnorm_nsmul hŒ≥', ‚Üênsmul_eq_mul, div_le_iff' (show (0 : ‚Ñù) < card G, by positivity),
      ‚Üêdiv_div, *] using global_dichotomy hA hŒ≥C hŒ≥ hAC },
  sorry
end
